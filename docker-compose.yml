services:
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"  # Standard client port for Zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservice_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"  # Standard port for Kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - microservice_network
    healthcheck: # helth check to periodically pings the service endpoint
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

# Nginx configuration
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80" 
    depends_on:
      - threat-detection
      - incident-management
      - logging
      - response 
      - notification
    networks:
      - microservice_network

# Treat-detection configuration
  threat-detection:
    build:
      context: ./threat-detection
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - microservice_network
    environment:
      - KAFKA_HOST=kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5

# Incident-management configuration
  incident-management:
    build:
      context: ./incident-management
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservice_network
    environment:
      - KAFKA_HOST=kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3001/"]
      interval: 10s
      timeout: 5s
      retries: 5

# Response configuration
  response:
    build:
      context: ./response
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservice_network
    environment:
      - KAFKA_HOST=kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3002/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Logging configuration
  logging:
    build:
      context: ./logging
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    networks:
      - microservice_network
    environment:
      - KAFKA_HOST=kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3003/"]
      interval: 10s
      timeout: 5s
      retries: 5

# Notification configuration
  notification:
    build:
      context: ./notification
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    networks:
      - microservice_network
    environment:
      - KAFKA_HOST=kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3004/"]
      interval: 10s
      timeout: 5s
      retries: 5
# Providing a private internal network
networks:
  microservice_network:
    driver: bridge
