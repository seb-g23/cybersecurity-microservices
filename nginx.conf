events {
    worker_connections 1024; # maximum simultaneous connections each working process can handle
    multi_accept on; # allowing to accept numerous connections in the same time, improving performance under high traffic
}

http {
    # Upstream configuration for the "threat_detection" service:
    upstream threat_detection_upstream {
        least_conn;  #routing requests to the server with the least number of connections
        server threat-detection:3000; #first instance of the service
        server threat-detection:3000; #second instance of the service for redundancy
    }
    # Upstream configuration for the "incident-management" service:
    upstream incident_management_upstream {
        least_conn;
        server incident-management:3001;
        server incident-management:3001;
    }

    # Upstream configuration for the "response service:
    upstream response_upstream {
        least_conn;
        server response:3002;
        server response:3002;
    }

    # Upstream configuration for the "logging" service:
    upstream logging_upstream {
        least_conn;
        server logging:3003;
        server logging:3003;
    }
    # Upstream configuration for the "notification" service:
    upstream notification_upstream {
        least_conn;
        server notification:3004;
        server notification:3004;
    }

    server {
        
        listen 80; # NGINX listens on port 80

        # Location block for the threat-detection service
        location /threats {
            proxy_pass http://threat_detection_upstream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Location block for the incident-management service
        location /incidents {
            proxy_pass http://incident_management_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Location block for the response service
        location /response {
            rewrite ^/response/?(.*)$ /$1 break;
            proxy_pass http://response_upstream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Location block for the logging service
        location /logging {
            rewrite ^/logging/?(.*)$ /$1 break;
            proxy_pass http://logging_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Location block for the notification service
        location /notification {
            rewrite ^/notification/?(.*)$ /$1 break;
            proxy_pass http://notification_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default location block
        location / {
            return 200 "Welcome to the Cyber - Security Microservices!";
            add_header Content-Type text/plain;
        }
    }
}
